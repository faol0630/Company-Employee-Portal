
Antes de empezar en pom.xml debe estar la dependency de spring security:

    <dependency>
    			<groupId>org.springframework.boot</groupId>
    			<artifactId>spring-boot-starter-security</artifactId>
    </dependency>

    debemos tener un Entity que tenga un atributo username y un atributo password.

    En el atributo password usamos PasswordEncoder para encriptarlo, cosa de que
    cuando se creen Objetos de ese Entity ya esten con el password encriptado.
    (ejecutar paso 16).

    Tambien podriamos ejecutar el paso 19 agregar dependencies de JWT.


1) En EmployeeRepository agregamos el siguiente metodo:

    Optional<Employee> findByUsername(String username);

2) crear paquete auth

3) dentro de auth, crear la class SpringSecurityConfig

4) dentro de auth crear el paquete filters

5) dentro de auth creamos la class TokenJwtConfig, que va a contener constantes que vamos a usar en las
    class JwtAuthFilter(se crea en el prox paso) y JwtValidationFilter(se crea mas adelante). esta class
    tiene esta forma:

    public class TokenJwtConfig {

        //constantes usadas solo en las clases JwtValidationFilter y JwtAuthFilter:
        public final static String SECRET_KEY =  "token_creado_por_usuario";
        public final static String PREFIX_TOKEN =  "Bearer ";
        public final static String HEADER_AUTH =  "Authorization";
        public final static String CONTENT_TYPE =  "application/json";


    }

6) dentro de filters crear la class JwtAuthFilter

7) en la class SpringSecurityConfig declaramos el siguiente atributo:

    @Autowired
    private AuthenticationConfiguration authenticationConfiguration;

8) en la misma class SpringSecurityConfig dentro del metodo filterChain, agregar la siguiente linea:

    .addFilter(new JwtAuthFilter(authenticationConfiguration.getAuthenticationManager()))

9) tambien en la class SpringSecurityConfig agregar el siguiente metodo para poder probar nuestra app:

        @Bean
        PasswordEncoder passwordEncoder(){
            return NoOpPasswordEncoder.getInstance();
        }

10) dentro de service o dentro de auth crear la class JpaUserDetailsService

        Cuando se cree la class JpaUserDetailsService
        del paso 10, se puede crear con la logica que va a llevar al final (paso 18),
        lo que hace innecesario la ejecucion del paso11 y el comentario del paso 10.
        Hacemos la prueba directo con el username y el password de cada entity sin tener
        que usar admin y 12345.

En este punto hacemos una prueba con postman en donde en el endpoint localhost:8080/login
pasamos como user : "admin" y password : "12345" y esto nos debe devolver el token provisional que hemos creado.
Este token será reemplazado mas adelante por un jwt.

11) implementacion de BCryptPasswordEncoder: en la class JpaUserDetailsService dentro del metodo loadUserByUsername
    el password que tenemos como 12345 lo reemplazamos con
    "$2a$10$DOMDxjYyfZ/e7RcBfUpzqeaCs8pLgcizuiQWXPkU35nOhZlFcE9MS"

    esto es un password del tipo BCryptPasswordEncoder que estamos generando manualmente mientras terminamos
    la implementacion.

12) en la class SpringSecurityConfig creamos el siguiente metodo:

        @Bean
        AuthenticationManager authenticationManager() throws Exception{
            return authenticationConfiguration.getAuthenticationManager();
        }

13) en el metodo passwordEncoder de la misma class SpringSecurityConfig cambiamos el contenido reemplazando
    passwordEncoder por BCryptPasswordEncoder():

        @Bean
        PasswordEncoder passwordEncoder(){
            return new BCryptPasswordEncoder();
        }

En este punto volvemos a probar la app.Deberia funcionar igual que la prueba anterior.

14) dentro del paquete auth.filters creamos la class JwtValidationFilter.

15) en la class SpringSecurityConfig agregamos el filter de la recien creada class JwtValidationFilter:

    .addFilter(new JwtValidationFilter(authenticationConfiguration.getAuthenticationManager()))


En este punto se puede hacer una prueba pasando el token que resulta de ejecutar el POST:

    POST http://localhost:8080/login en donde en el body pasamos:

    {
      "username": "admin",
      "password": "12345"
    }

    esto devuelve algo como :

    {
      "message": "Hello admin, successful login",
      "token": "dG9rZW5fY3JlYWRvX3Bvcl91c3VhcmlvOmFkbWlu",
      "username": "admin"
    }

    con el token de la respuesta anterior pasandolo via Auth Bearer , ejecutamos los demas endpoints.si
    todo ha sido bien hecho, no se deberia tener ningun problema.

16) en la class ServiceImpl declaramos Password encoder :

        @Autowired
        PasswordEncoder passwordEncoder;

    en el metodo save o createNewEmployee, encriptamos el password haciendo algo como :


        @Override
        public void newEmployee(Employee employee){
            String passwordBCrypt = passwordEncoder.encode(employee.getPassword());
            employee.setPassword(passwordBCrypt);
            employeeRepo.save(employee);
        }

    tanto el password sin encriptar como el password encriptado son String , asi que esto no genera
    ningun problema.

17) en la base de datos (mysql en este caso) debemos borrar todas las tuplas y volver a crearlas pero
    esta vez ya estaran con el password encriptado.

    En este se puede volver a probar la app , creando nuevos employee y si todo está bien , deben crearse
    con el password debidamente encriptado.Todavia seguimos usando el token que obtenemos con username
    admin y password 12345 ya que esa parte aun no se ha configurado.



18) En JpaUserDetailsService , debido a que es un @Service , inyectamos el repository:

        @Autowired
        private EmployeeRepo employeeRepo;

        reemplazamos la logica del metodo loadUserByUsername por :

                Optional<Employee> employeeOptional = employeeRepo.findByUsername(username);

                if (!employeeOptional.isPresent()){
                    throw new UsernameNotFoundException(String.format("Username %s not found", username));
                }

                Employee employee = employeeOptional.orElseThrow();

                List<GrantedAuthority> authorities = new ArrayList<>();
                authorities.add(new SimpleGrantedAuthority("ROLE_USER"));

                return new User(//este User viene con spring framework.No es un entity que hayamos creado.
                        employee.getUsername(),
                        employee.getPassword(),
                        true,
                        true,
                        true,
                        true,
                        authorities
                );

        con esta logica, los password creados con los Employees van a ser los password para hacer login.

19) Empezamos con JWT. agregamos 3 dependencies a pom.xml :

            <dependency>
    			<groupId>io.jsonwebtoken</groupId>
    			<artifactId>jjwt-api</artifactId>
    			<version>0.11.5</version>
    		</dependency>

    		<dependency>
    			<groupId>io.jsonwebtoken</groupId>
    			<artifactId>jjwt-impl</artifactId>
    			<version>0.11.5</version>
    			<scope>runtime</scope>
    		</dependency>

    		<dependency>
    			<groupId>io.jsonwebtoken</groupId>
    			<artifactId>jjwt-jackson</artifactId>
    			<version>0.11.5</version>
    			<scope>runtime</scope>
    		</dependency>

20) en la class TokenJwtConfig modificamos la constante SECRET_KEY:

    public final static Key SECRET_KEY =  Keys.secretKeyFor(SignatureAlgorithm.HS256);

21) en la class JwtAuthFilter dentro del metodo successfulAuthentication, reemplazamos el token
provisional que habiamos creado con un token JWT :

    String token = Jwts.builder()
                    .setSubject(username)
                    .signWith(SECRET_KEY)
                    .setIssuedAt(new Date())
                    .setExpiration(new Date(System.currentTimeMillis() + 3600000))
                    .compact();

22) en la class JwtValidationFilter dentro del metodo doFilterInternal,
    el if else lo convertimos en un try catch.quitamos las 5 lineas anteriores a dicho try catch.
    el codigo dentro del metodo doFilterInternal queda asi :


            String header = request.getHeader(HEADER_AUTH);

            if (header == null || !header.startsWith(PREFIX_TOKEN)){
                chain.doFilter(request, response);
                return;
            }

            String token = header.replace(PREFIX_TOKEN, "");

            try{
                //validando el token:
                Claims claims = Jwts.parserBuilder().setSigningKey(SECRET_KEY)
                        .build()
                        .parseClaimsJws(token)
                        .getBody();

                String username = claims.getSubject();

                List<GrantedAuthority> authorities = new ArrayList<>();
                authorities.add(new SimpleGrantedAuthority("ROLE_USER"));

                UsernamePasswordAuthenticationToken authenticationToken = new UsernamePasswordAuthenticationToken(username, null, authorities);
                SecurityContextHolder.getContext().setAuthentication(authenticationToken); //autenticacion
                chain.doFilter(request,response);

            }catch (JwtException e){

                Map<String, String> body = new HashMap<>();//string string porque solo va a pasar mensajes de error
                body.put("error", e.getMessage());
                body.put("message", "Invalid jwt token");
                response.getWriter().write(new ObjectMapper().writeValueAsString(body));
                response.setStatus(403);
                response.setContentType(CONTENT_TYPE);

            }

23)  Creamos un Entity llamado Role.Creamos el Repository de Role.
    En el repository de Role creamos el metodo findByName quedando asi:

    @Repository
    public interface RoleRepository extends JpaRepository<Role, Long> {
        Optional<Role> findByName(String name);
    }

24) Relacionamos Role y Employee @ManyToMany.en el entity Employee agregamos:

        @ManyToMany
        @JoinTable(name = "employees_roles",
                joinColumns = @JoinColumn(name = "id_employee"), //esta tabla
                inverseJoinColumns = @JoinColumn(name = "id_role"),
                uniqueConstraints = { @UniqueConstraint(columnNames = { "id_employee", "id_role"})}
        )
        private List<Role> roles;

25) Levantamos la app.esto crea una tabla intermedia entre Employee y Role.
    en la base de datos llenamos esa tabla intermedia que solo contiene
    id_employee y id_role.asignamos por cada employee uno o varios id_role.
    La combinacion de id_employee con id_role no se puede repetir.

26) modificamos en el serviceImpl el metodo save o newEmployee ya que tenemos que
    asignarle un role por defecto.Hasta este punto el employee no asigna el role
    ya que no tiene sentido que el mismo employee se asigne el role de admin.
    asi que el metodo save del serviceImpl quedaria asi:

        @Override
        public void newEmployee(Employee employee){
            String passwordBCrypt = passwordEncoder.encode(employee.getPassword());
            employee.setPassword(passwordBCrypt);

            //buscamos el role en la DB:
            Optional<Role> role = roleRepository.findByName("ROLE_USER");
            //creamos una lista de roles debido a la relacion @ManyToMany:
            List<Role> roles = new ArrayList<>();

            if (role.isPresent()){
                //agregamos el role a la lista de roles
                roles.add(role.orElseThrow());
            }
            //agregamos la lista de roles al employee:
            employee.setRoles(roles);
            //creamos el newEmployee:
            employeeRepo.save(employee);
        }

    para que esto funcione antes debemos inyectar el roleRepository:

    @Autowired
    RoleRepository roleRepository;

27) en JpaUserDetailsService vamos a reemplazar el Role provisional que tenemos ahi por
    un Role traido desde la DB.reemplazamos esto:

    List<GrantedAuthority> authorities = new ArrayList<>();
    authorities.add(new SimpleGrantedAuthority("ROLE_USER"));

    por esto:

    //a cada employee le pasamos su lista de roles desde DB:
    List<GrantedAuthority> authorities = employee
              .getRoles()
              .stream()
              .map( role ->
                  new SimpleGrantedAuthority(role.getName())
              ).collect(Collectors.toList());

28) En este punto vamos a pasar los roles de cada employee al token.
    En la class JwtAuthFilter , dentro del metodo successfulAuthentication, despues de configurar username:

            Collection<? extends GrantedAuthority> roles = authResult.getAuthorities();
            //para averiguar si es Admin:
            boolean isAdmin = roles.stream().anyMatch(role -> role.getAuthority().equals("ROLE_ADMIN"));
            Claims claims = Jwts.claims(); //data dentro del token
            claims.put("authorities", new ObjectMapper().writeValueAsString(roles));//agregamos los roles s claims
            claims.put("isAdmin", isAdmin);

    en el token pasamos los roles usando claims.quedaria de esta forma :

            //JWT token:
            String token = Jwts.builder()
                    .setClaims(claims)//pasando los roles al token usando claims.
                    .setSubject(username)
                    .signWith(SECRET_KEY)
                    .setIssuedAt(new Date())
                    .setExpiration(new Date(System.currentTimeMillis() + 3600000))
                    .compact();

29) Dentro del paquete auth, Creamos una class abstracta para poder pasar los roles al token sin errores :

    public abstract class SimpleGrantedAuthorityJsonCreator {

        @JsonCreator
        public SimpleGrantedAuthorityJsonCreator(@JsonProperty("authority") String role) {
        }
    }


30) En la class JwtValidationFilter dentro del metodo doFilterInternal, dentro del try el codigo quedaria:

                Claims claims = Jwts.parserBuilder().setSigningKey(SECRET_KEY)
                        .build()
                        .parseClaimsJws(token)
                        .getBody();

                String username = claims.getSubject();

                Object authoritiesClaims = claims.get("authorities");

                Collection<? extends GrantedAuthority> authorities = Arrays.asList(new ObjectMapper()
                        .addMixIn(SimpleGrantedAuthority.class, SimpleGrantedAuthorityJsonCreator.class)
                        .readValue(authoritiesClaims.toString().getBytes(), SimpleGrantedAuthority[].class));

                UsernamePasswordAuthenticationToken authenticationToken = new UsernamePasswordAuthenticationToken(username, null, authorities);
                SecurityContextHolder.getContext().setAuthentication(authenticationToken); //autenticacion
                chain.doFilter(request,response);

31) pasamos a implementar el patron DTO. primero creamos un paquete llamado dto.
    dentro de ese paquete creamos una clase llamada en este caso EmployeeDTO en donde
    vamos a pasar solo los atrobutos que queremos que sean visibles.

32) dentro del paquete dto creamos otro paquete llamado mapper.dentro de mapper creamos
    la clase (en este caso) EmployeeMapper o EmployeeDTOMapper, la cual implementa dentro
    el patron builder en donde se crea un Objeto EmployeeDTO desde un Objeto Employee.

33) en la interface ServiceInt y en la class ServiceImpl , modificamos los metodos
    findAll, findByID,y todos los metodos que devuelvan el entity
    para que devuelvan el objeto DTO.Lo mismo hacemos en Controller.


En este punto hemos terminado de implementar la seguridad en la app.

[Manejo de excepciones][Manejo de excepciones][Manejo de excepciones][Manejo de excepciones]

34) creamos un paquete llamado exceptions

35) dentro de exceptions creamos una clase con atributos que va a representar el error

36) tambien dentro de exceptions creamos otra clase que va a ser quien manipula los errores.
    se puede llamar por ejemplo: HandlerExceptionController que lleva la anotacion
    @RestControllerAdvice

37) en el caso de que queramos personalizar el error 404 agregamos en application properties:

    spring.mvc.throw-exception-if-no-handler-found=true
    spring-web.resources.add-mappings=false

38) podemos crear exceptions personalizadas que van a ser el parametro message de la class Error.Ejemplo:


    public class FieldValidationException extends RuntimeException{

        public FieldValidationException(String message) {
            super(message);
        }
    }

39) en @Service debemos cambiar la configuracion y en @Controller debemos usar try catch.

    Ejemplo en @Service en el @POST:

            //errores manejados con FieldValidationException
            if (employee.getId_employee().equals(null) || employee.getId_employee().equals(Integer.parseInt(""))){
                throw new FieldValidationException("Id cannot be empty");
            }
            if (employee.getName() == null || employee.getName().equals("")){
                throw new FieldValidationException("Name cannot be empty");
            }


    Ejemplo en @Controller en el endpoint @POST:

            HashMap<String, Object> response = new HashMap<>();

            try{

                service.newEmployee(employee);

                EmployeeDTO employeeDTO = EmployeeDTOMapper.getInstance().setEmployeeDTOMapper(employee).build();

                response.put("message", "Employee created");
                response.put("employeeDTO", employeeDTO);

                return ResponseEntity.status(HttpStatus.OK).body(response);

            }catch (FieldValidationException ex){

                return ResponseEntity.status(HttpStatus.BAD_REQUEST).body(ex.getMessage());

            }

_________________________________________________________________________________________
PRUEBAS UNITARIAS PRUEBAS UNITARIAS PRUEBAS UNITARIAS PRUEBAS UNITARIAS PRUEBAS UNITARIAS
_________________________________________________________________________________________

40) para hacer pruebas agregamos a pom.xml:


    <!--Pruebas-->

            <!-- Dependencia para JUnit 5 -->
            <dependency>

                <groupId>org.springframework.boot</groupId>
                <artifactId>spring-boot-starter-test</artifactId>
                <scope>test</scope>
                <exclusions>
                    <exclusion>
                        <groupId>org.junit.vintage</groupId>
                        <artifactId>junit-vintage-engine</artifactId>
                    </exclusion>
                </exclusions>

            </dependency>

            <!-- Dependencia para Mockito -->
            <dependency>
                <groupId>org.mockito</groupId>
                <artifactId>mockito-core</artifactId>
                <version>4.0.0</version>
                <scope>test</scope>
            </dependency>

            <!-- Dependencia para integrar Mockito con JUnit 5 -->
            <dependency>
                <groupId>org.mockito</groupId>
                <artifactId>mockito-junit-jupiter</artifactId>
                <version>4.0.0</version>
                <scope>test</scope>
            </dependency>












-----------------------------------------------------------------------------------------------------------------
-----------------------------------------------------------------------------------------------------------------
-----------------------------------------------------------------------------------------------------------------
-----------------------------------------------------------------------------------------------------------------

COPIAR Y PEGAR

1) En pom.xml agregar las dependencias de spring security y de jwt:

        <dependency>
        			<groupId>org.springframework.boot</groupId>
        			<artifactId>spring-boot-starter-security</artifactId>
        </dependency>

        <dependency>
            	    <groupId>io.jsonwebtoken</groupId>
            		<artifactId>jjwt-api</artifactId>
            		<version>0.11.5</version>
        </dependency>

        <dependency>
            		<groupId>io.jsonwebtoken</groupId>
            		<artifactId>jjwt-impl</artifactId>
            		<version>0.11.5</version>
            		<scope>runtime</scope>
        </dependency>

        <dependency>
            		<groupId>io.jsonwebtoken</groupId>
            		<artifactId>jjwt-jackson</artifactId>
            		<version>0.11.5</version>
            		<scope>runtime</scope>
        </dependency>

2) En el Repository agregar el metodo:

    Optional<Employee> findByUsername(String username);

    reemplazamos Employee por el entity de nuestra app.

3) En el serviceImpl de nuestra app inyectamos :

    @Autowired
    PasswordEncoder passwordEncoder;

    con este password encoder encriptamos el password en los metodos POST y PUT quedando algo como:

        @Override
        public void newEmployee(Employee employee){
            String passwordBCrypt = passwordEncoder.encode(employee.getPassword());
            employee.setPassword(passwordBCrypt);
            employeeRepo.save(employee);
        }

Si se trata de copiar y pegar , las class SpringSecurityConfig y TokenJwtConfig se pueden pegar sin tener
que modificar nada.

En la class JwtAuthFilter toca cambiar todo lo que se refiere a Employee ya que ese es el entity de esta app
pero en otra podria ser User , Client , etc.Esto solo seria en el metodo attemptAuthentication, cambiando 2
lineas de codigo.

En la class JpaUserDetailsService si toca reemplazar toda la logica de Employee por el entity de la app ya que
el metodo loadUserByUsername es un metodo tipico de un service en donde se usa el repository para llamar a un
metodo.en este caso habria que reemplazar todo lo que se relacione con Employee y en su lugar poner el entity
de la app que estemos trabajando.

Por ultimo la class JwtValidationFilter se copia y se pega sin cambiar nada.(hasta aqui vamos en el paso 23)












